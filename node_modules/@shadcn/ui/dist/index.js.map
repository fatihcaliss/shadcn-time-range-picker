{"version":3,"sources":["../src/index.ts","../src/utils/get-components.ts","../src/utils/get-package-info.ts","../src/utils/get-package-manager.ts","../src/utils/logger.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { existsSync, promises as fs } from \"fs\"\nimport path from \"path\"\nimport { Command } from \"commander\"\nimport { execa } from \"execa\"\nimport ora from \"ora\"\nimport prompts from \"prompts\"\n\nimport { Component, getAvailableComponents } from \"./utils/get-components\"\nimport { getPackageInfo } from \"./utils/get-package-info\"\nimport { getPackageManager } from \"./utils/get-package-manager\"\nimport { logger } from \"./utils/logger\"\n\nprocess.on(\"SIGINT\", () => process.exit(0))\nprocess.on(\"SIGTERM\", () => process.exit(0))\n\nasync function main() {\n  const packageInfo = await getPackageInfo()\n\n  const program = new Command()\n    .name(\"@shadcn/ui\")\n    .description(\"Add @shadcn/ui components to your project\")\n    .version(\n      packageInfo.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\"\n    )\n\n  program\n    .command(\"add\")\n    .description(\"add components to your project\")\n    .action(async () => {\n      logger.warn(\n        \"Running the following command will overwrite existing files.\"\n      )\n      logger.warn(\n        \"Make sure you have committed your changes before proceeding.\"\n      )\n      logger.warn(\"\")\n\n      const { components, dir } = await promptForAddOptions()\n      if (!components?.length) {\n        logger.warn(\"No components selected. Nothing to install.\")\n        process.exit(0)\n      }\n\n      // Create componentPath directory if it doesn't exist.\n      const destinationDir = path.resolve(dir)\n      if (!existsSync(destinationDir)) {\n        const spinner = ora(`Creating ${dir}...`).start()\n        await fs.mkdir(destinationDir, { recursive: true })\n        spinner.succeed()\n      }\n\n      const packageManager = getPackageManager()\n\n      logger.success(`Installing components...`)\n      for (const component of components) {\n        const componentSpinner = ora(`${component.name}...`).start()\n\n        // Write the files.\n        for (const file of component.files) {\n          const filePath = path.resolve(dir, file.name)\n          await fs.writeFile(filePath, file.content)\n        }\n\n        // Install dependencies.\n        if (component.dependencies?.length) {\n          const dependencies = component.dependencies.join(\" \")\n          await execa(packageManager, [\n            packageManager === \"npm\" ? \"install\" : \"add\",\n            dependencies,\n          ])\n        }\n        componentSpinner.succeed(component.name)\n      }\n    })\n\n  program.parse()\n}\n\ntype AddOptions = {\n  components: Component[]\n  dir: string\n}\n\nasync function promptForAddOptions() {\n  const availableComponents = await getAvailableComponents()\n\n  if (!availableComponents?.length) {\n    logger.error(\n      \"An error occurred while fetching components. Please try again.\"\n    )\n    process.exit(0)\n  }\n\n  const options = await prompts([\n    {\n      type: \"multiselect\",\n      name: \"components\",\n      message: \"Which component(s) would you like to add?\",\n      hint: \"Space to select. A to select all. I to invert selection.\",\n      instructions: false,\n\n      choices: availableComponents.map((component) => ({\n        title: component.name,\n        value: component,\n      })),\n    },\n    {\n      type: \"text\",\n      name: \"dir\",\n      message: \"Where would you like to install the component(s)?\",\n      initial: \"./components/ui\",\n    },\n  ])\n\n  return options as AddOptions\n}\n\nmain()\n","import fetch from \"node-fetch\"\nimport * as z from \"zod\"\n\nconst baseUrl = process.env.COMPONENTS_BASE_URL ?? \"https://ui.shadcn.com\"\n\nconst componentSchema = z.object({\n  name: z.string(),\n  dependencies: z.array(z.string()).optional(),\n  files: z.array(\n    z.object({\n      name: z.string(),\n      dir: z.string(),\n      content: z.string(),\n    })\n  ),\n})\n\nexport type Component = z.infer<typeof componentSchema>\n\nconst componentsSchema = z.array(componentSchema)\n\nexport async function getAvailableComponents() {\n  try {\n    const response = await fetch(`${baseUrl}/api/components`)\n    const components = await response.json()\n\n    return componentsSchema.parse(components)\n  } catch (error) {\n    throw new Error(\n      `Failed to fetch components from ${baseUrl}/api/components.`\n    )\n  }\n}\n","import path from \"path\"\nimport fs from \"fs-extra\"\nimport { type PackageJson } from \"type-fest\"\n\nexport function getPackageInfo() {\n  const packageJsonPath = path.join(\"package.json\")\n\n  return fs.readJSONSync(packageJsonPath) as PackageJson\n}\n","export function getPackageManager() {\n  const userAgent = process.env.npm_config_user_agent\n\n  if (!userAgent) {\n    return \"npm\"\n  }\n\n  if (userAgent.startsWith(\"yarn\")) {\n    return \"yarn\"\n  }\n\n  if (userAgent.startsWith(\"pnpm\")) {\n    return \"pnpm\"\n  }\n\n  return \"npm\"\n}\n","import chalk from \"chalk\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args))\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args))\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args))\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args))\n  },\n}\n"],"mappings":"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","names":["fs","path","path","fs"]}